var documenterSearchIndex = {"docs":
[{"location":"setup/#Setup-for-a-Simulation","page":"Setup","title":"Setup for a Simulation","text":"","category":"section"},{"location":"setup/","page":"Setup","title":"Setup","text":"First, the setup begins by creating a data structur that organizes the information and Simulation datas, for each protein and temperture. Here the proteins sequences are taken from a dictionary of predefined sequences.\nBased on the protein sequence, the number of chains (NChains) required to achieve the target density in the simulation box is calculated. Once NChains is determined, a list is generated containing NChains repetitions of the protein sequences. Alternatively one could add a mixture of different proteins/sequences here.\nNext, the parameters of the simulation box, such as its size and boundary conditions, are defined. \nUsing the previously defined data, the initial coordinates of the proteins are generated using the python package named Polyply, ensuring a unordered preminimized starting configuration for the simulation. \nFinally, all necessary documentation and inputs are written, including the simulation parameters, the interaction models, relevant dictionaries, and the start file. These files will be used to initialize the simulation externally.","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"ToCreate =  [\"RS31\", \"RS31a_IDR2\", \"RS31_IDR2\"]\n\nfor (protID, protein) in enumerate(ToCreate)\n    mkpath(BasePath*\"$(protein)/\")\n    for temp in Temperatures\n        ###Generation of the folder structur for each protein and temperature\n        pad = lpad(getkey(RunsPerProtein,protein,1),3,\"0\")\n        mkpath(BasePath*\"$(protein)/$(temp)K/\")\n        mkpath(BasePath*\"$(protein)/$(temp)K/RUN_$(pad)/\")\n        mkpath(BasePath*\"$(protein)/$(temp)K/RUN_$(pad)/Restart/\")\n        Path = BasePath*\"$(protein)/$(temp)K/RUN_$(pad)/\"\n        cd(Path)\n\n        ###Sequence from predefined sequences \n        Seq = HPS.ProteinSequences.NameToSeq[protein]\n\n        ###Calculation of number of chains (NChains) required to achieve the target density (Box=[L,L*factor,L])\n        NChains = DetermineNumberChains(Seq, SimulationType=\"Calvados2\", pH=pH, SideLength=SideLength, density=0.4,fac=width_multiplier)\n\n        ###List of NChains repetitions of sequences and proteins\n        Seq = HPS.ProteinSequences.NameToSeq[protein]\n        Sequences= [deepcopy(Seq) for _ in 1:NChains]\n        Proteins = [deepcopy(protein) for _ in 1:NChains]\n        Info =\"SLAB Simulation script for $protein.\\n\\n\"\n\n        ###Parameters of the simulation box\n        BoxLengthShort=Float32(350.0)      \n        BoxLengthLong=Float32(1500.)\n        BoxSize = [-BoxLengthShort/2., BoxLengthShort/2.,-BoxLengthLong/2., BoxLengthLong/2.,-BoxLengthShort/2., BoxLengthShort /2.]\n\n        SimName = \"$(protein)_$temp\"\n\n        ###Initial coordinates of the proteins are calculated\n        (pos, Data) = HPS.CreateStartConfiguration(SimName,Path , Float32.([BoxLengthShort,BoxLengthShort*width_multiplier , BoxLengthShort]), Proteins, Sequences, Regenerate=false; Axis=\"y\")#Erstellung der Start Conformation\n\n        ###Inputs are written, including the simulation parameters, the interaction model, relevant dictionaries, and the start file\n        HPS.Setup.writeStartConfiguration(\"./$(protein)_slab\",\"./$(SimName)_Start_slab.txt\", Info, Sequences, BoxSize , 300_000_000, HOOMD=true, ; SimulationType=\"Calvados2\" , Temperature=temp,  InitStyle=\"Pos\", Pos=pos , pH=pH)\n    end\nend","category":"page"},{"location":"SlabAnalysis/#Common-Slab-analysis-methods","page":"Slab Analysis","title":"Common Slab analysis methods","text":"","category":"section"},{"location":"SlabAnalysis/#Computation-of-slab-histograms-analysis","page":"Slab Analysis","title":"Computation of slab histograms analysis","text":"","category":"section"},{"location":"SlabAnalysis/","page":"Slab Analysis","title":"Slab Analysis","text":"Here is a common way how slab simulations are analysed.","category":"page"},{"location":"SlabAnalysis/","page":"Slab Analysis","title":"Slab Analysis","text":"import HPSAnalysis as HPS\n\nprot= HPS.initData(\"/Path/To/Data/\"; Reparse=true, LoadAll=true, HOOMD=true)\n\nprot.EquilibrationTime=...\n\n### compute RG and it's auto correlation \nHPS.computeCOM!(prot)\nHPS.computeRGSeries!(prot)\nHPS.computeRGCorrelationTime(prot)\nHPS.plotRGAutocorr(prot)\n\nHPS.computeClustersByChainCOM(prot)\n### computes slab histograms in range \n### Sim.ClusterRange=prot.EquilibrationTime:prot.RGMeasureStep:prot.NSteps\nHPS.computeSlabHistogram(prot)\nHPS.plotAvgSlabDensity(prot; Windowlength=1000)\nHPS.plotAvgSlabDensityEvolution(prot; Windowlength=100)\n\nHPS.SaveAllData(prot)\n\n","category":"page"},{"location":"listfunctions/#List-of-all-functions","page":"List of functions","title":"List of all functions","text":"","category":"section"},{"location":"listfunctions/","page":"List of functions","title":"List of functions","text":"Here an overview of all functions:","category":"page"},{"location":"listfunctions/#HPSAnalysis.CreateStartConfiguration-Tuple{String, String, Vector{Float32}, Vector{String}, Vector{String}}","page":"List of functions","title":"HPSAnalysis.CreateStartConfiguration","text":"CreateStartConfiguration(SimulationName::String, Path::String, BoxSize::Vector{R}, Proteins::Vector{String}, Sequences::Vector{String} ; Axis=`y`, Regenerate=true,SimulationType=\"Calvados2\",ProteinToDomain=Dict(),ProteinToCif=Dict())\n\nCreates the file structure and initialises particle positions for the given parameters.\n\nArguments:\n\nSimulationName::String: The name of the simulation.\nPath::String: The base directory where simulation data will be stored.\nBoxSize::Vector{R}: A vector defining the box dimensions (x, y, z).\nProteins::Vector{String}: List of protein names used in the simulation.\nSequences::Vector{String}: List of amino acid sequences corresponding to the proteins.\n\nOptional Arguments:\n\nAxis::String: The axis along which the system is unfolded.\nRegenerate::Bool: If true, regenerates initial positions using the Polyply package.\nSimulationType::String: Type of Simulation (default is Calvados2).\nProteinToDomain::Dict: Dictionary of domains for the proteins.\nProteinToCif::Dict: Dictionary of the AlphaFold data files for each protein.\n\nReturns:\n\nA tuple (pos, Data) containing the initial positions and the simulation data structure.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.SaveAllData-Union{Tuple{HPSAnalysis.SimData{R, I}}, Tuple{I}, Tuple{R}} where {R<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.SaveAllData","text":"SaveAllData(Sim::SimData{R,I}) where {R<:Real, I<:Integer}\n\nSave of the Field information as a jld2 file.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\n\nCreat:\n\nSave File.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.computeAvgBondAngles-Union{Tuple{HPSAnalysis.SimData{T, I}}, Tuple{I}, Tuple{T}} where {T<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.computeAvgBondAngles","text":"computeAvgBondAngles(Sim::SimData{T, I}; NBins = 180) where {T<:Real, I<:Integer}\n\nComputes the average bond angles.\n\nComputes the bond angles, the cosine thereof for each triplet of beads i, i+1, i+2 along the backbone of the proteins for each frame. The average bond angle and the average cosine of the bond angle are computed over all steps for each triplet independly. The histogram averages also over all triplets. The persistence length is computed if the average of the cosine of the bond angle is large than zero and otherwise set to 0. \n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\nNBins::Int: Number of bins for the angle histogram (default: 180).\n\nCreates:\n\nSim.AvgBondAngles: Stores the averaged bond angles.\nSim.AvgCosBondAngles: Stores the averaged cosine of bond angles.\nSim.LocalPersistenceLength: Computes the persistence length from bond angles.\nSim.BondAngleHist: Stores the histogram of bond angles.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.computeCOM!-Union{Tuple{HPSAnalysis.SimData{R, I}}, Tuple{I}, Tuple{R}} where {R<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.computeCOM!","text":"computeCOM!(Sim::HPSAnalysis.SimData{R,I}) where {R<:Real, I<:Integer}\n\nComputes the center of mass (COM) for each polymer chain.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\n\nUpdates:\n\nSim.COM: COM of each chain.\nSim.COM_uw: Unwrapped COM.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.computeCOMOfLargestCluster-Union{Tuple{HPSAnalysis.SimData{T, I}}, Tuple{T}, Tuple{I}} where {I<:Integer, T<:Real}","page":"List of functions","title":"HPSAnalysis.computeCOMOfLargestCluster","text":"computeCOMOfLargestCluster(Sim::SimData{T,I} ) where {I<:Integer, T<:Real}\n\nComputes COM of the largest cluster along the axis Sim.SlabAxis in the unwrapped positions.\n\nFor the algorithm to work, it is important that the dense phase of the first frame is not crossing the periodic boundaries. The algorithm take dense phase center of the previous step to pre center the data to about issues  at the boundaries. Therefore it works only when the displacement along Sim.SlabAxis between consecutive frames is smaller than half of the box length.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\n\nReturns:\n\nComs::Vector{Float}: COM of largest cluster along the Sim.SlabAxis for each step.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.computeCOMsOfCluster-Union{Tuple{HPSAnalysis.SimData{T, I}}, Tuple{T}, Tuple{I}} where {I<:Integer, T<:Real}","page":"List of functions","title":"HPSAnalysis.computeCOMsOfCluster","text":"computeCOMsOfCluster(Sim::SimData{T,I} ) where {I<:Integer, T<:Real}\n\nComputes COM for each cluster in each frame.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\n\nReturns:\n\nComs::Matrix{Float}: Matrix of COM for each cluster and time step.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.computeClustersByBeadDistance-Union{Tuple{HPSAnalysis.SimData{T, Int}}, Tuple{T}, Tuple{Int}} where {Int<:Integer, T<:Real}","page":"List of functions","title":"HPSAnalysis.computeClustersByBeadDistance","text":"computeClustersByBeadDistance(Sim::HPSAnalysis.SimData{T,Int}; Cutoff=5.0) where{T<:Real, Int<:Integer}\n\nComputes clusters based on minimal distances between amino acids of protein and cutoff.\n\nComputes graph network for each frame in EquilibrationTime:RGMeasureStep:NSteps by naivly comparing all pairs of proteins, computing the minimal distance between any two amino acids of those proteins and adding an edge in the network if the distance is below the given cutoff. Returns the concatenation of groups of IDs belonging to weekly connected graph components of each frame.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\nCutoff::Float: Distance criterion for a Cluster.\n\nReturns:\n\nCluster::Vector{Vector{Vector{Int}}}: List of Clusters of the chains for each step.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.computeClustersByChainCOM-Union{Tuple{HPSAnalysis.SimData{T, Int}}, Tuple{Int}, Tuple{T}} where {T<:Real, Int<:Integer}","page":"List of functions","title":"HPSAnalysis.computeClustersByChainCOM","text":"computeClustersByCOM(Sim::HPSAnalysis.SimData{T,Int}; Cutoff=50.0) where{T<:Real, Int<:Integer}\n\nComputes clusters based on distances between protein COMs and cutoff.\n\nComputes graph network for each frame in EquilibrationTime:RGMeasureStep:NSteps by naivly computing minimal distances between all proteins center of masses based on the given cutoff. Returns the concatenation of groups of IDs belonging to weekly connected graph components of all frames.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\nCutoff::Float: Distance criterion for a Cluster.\n\nReturns:\n\nCluster::Vector{Vector{Vector{Int}}}: List of Clusters of the chains.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.computeDensityHistogram-Union{Tuple{HPSAnalysis.SimData{R, I}}, Tuple{I}, Tuple{R}, Tuple{HPSAnalysis.SimData{R, I}, Any}} where {R<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.computeDensityHistogram","text":"computeDensityHistogram(Sim::SimData{R,I}, DivLength=I(10)) where {R<:Real, I<:Integer}\n\nComputes a logarithmic histogram of densities of the subcubes of the simulation box.\n\nThe simulation box is divided into DivLength^4 subboxes where each dimension is divided into DivLength many subsections and the axes according to Sim.SlabAxis is divided into DivLength^2 many subsections.\n\nSubboxes that are empty or those that contain the boundary of the simulation box are not considered for the histogram.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\nDivLength=I(10)): Division factor determining the length of each subbox. \n\nCreat:\n\nSim.DensityHist: Stores subcube densities with logarithmic indices.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.computeDihedralAngles-Union{Tuple{HPSAnalysis.SimData{R, I}}, Tuple{I}, Tuple{R}} where {R<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.computeDihedralAngles","text":"computeDihedralAngles(Sim::SimData{R,I}) where {R<:Real, I<:Integer}\n\nComputes the dihedral angles (torsion angles).\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\n\nCreates:\n\nSim.TorsionAngles with computed dihedral angles.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.computeDihedralHist-Union{Tuple{HPSAnalysis.SimData{R, I}}, Tuple{I}, Tuple{R}} where {R<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.computeDihedralHist","text":"computeDihedralHist(Sim::SimData{R,I}; N = 500) where {R<:Real, I<:Integer}\n\nComputes a histogram of dihedral angles.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\n\nCreates:\n\nSim.TorsionHist with the invert of NDihedrals.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.computeIntraChainContactMatrix-Union{Tuple{HPSAnalysis.SimData{R, I}}, Tuple{I}, Tuple{R}} where {R<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.computeIntraChainContactMatrix","text":"computeIntraChainContactMatrix(Sim::SimData{R,I})\n\nComputes the intra chain contact map by averaging over all pair distances first and taking the logarithm thereof. \n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\n\nCreate:\n\nSim.IntraChainContactMatrix\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.computeIntraChainScalingNaiv-Union{Tuple{HPSAnalysis.SimData{R, I}}, Tuple{I}, Tuple{R}} where {R<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.computeIntraChainScalingNaiv","text":"computeIntraChainScalingNaiv(Sim::SimData{R,I})\n\nComputes the square intra chain distance |ri-rj| for all combinations and averages over the trajectory.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\n\nCreate:\n\nSim.IntraChainScalingNaiv\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.computeIntraChainScalingSlidingWindow-Union{Tuple{HPSAnalysis.SimData{R, I}}, Tuple{I}, Tuple{R}} where {R<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.computeIntraChainScalingSlidingWindow","text":"computeIntraChainScalingSlidingWindow(Sim::SimData{R,I})\n\nComputes the square intra chain distance |ri-rj|^2 and averages in a sliding window approach.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\n\nCreate:\n\nSim.IntraChainScalingSlidingWindow\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.computeSlabDensities-Union{Tuple{HPSAnalysis.SimData{R, I}}, Tuple{I}, Tuple{R}} where {R<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.computeSlabDensities","text":"computeSlabHistogram(Sim::SimData; Width=25, MaxVal=0.9, Surface_fac=0.8)\n\nComputes average density within dense phase and dilute phase as well as the indices below/above which Sim.SlabHistogramSeries is in dense/dilute phase.\n\nA mirror symmetric density around zero is computed from which dense phase approximation ρ_app is defined as the mean value of the first Width steps. The dense phase boundary is Surface_fac times the distance r_dense at which the density drops below MaxVal times ρ_app. Similarly the dilute phase boundary is the distance at which the density drops below 1-MaxVal times ρ_app plus r_dense times (1-Surface_fac).\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.computeSlabHistogram-Union{Tuple{HPSAnalysis.SimData{R, I}}, Tuple{I}, Tuple{R}} where {R<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.computeSlabHistogram","text":"computeSlabHistogram(Sim::SimData{R,I}; Use_Alpha=false, Use_Types=false) where {R<:Real, I<:Integer}\n\nComputes centered slab histograms along Sim.SlabAxis.\n\nCentered slab histograms are computed for all amino acids, only the positive and only the negatives at all times. Use_Alpha enables the computation of alpha helices and their own slab histogram. Amino acids specific histograms are enabled through Use_Types. \n\nResults are not return but stored in Sim.SlabHistogramSeries as an Offset array where the first dimension ranges from -boxwidth/Sim.Resolution:Sim.Resolution:boxwidth/Sim.Resolution. Default Sim.Resolution is set to 1AA. The second index are the steps at which clusters and slab histogram were computed according to Sim.ClusterRange. The third index are the amino acids which have been used the order in which they are mentioned above. If used, amino acid specific histograms have the index 4+Sim.IDs. \n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\n\nCreat:\n\nSim.SlabHistogramSeries: Stores mass densities across slabs for different atom types.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.getLargestClusterIDs-Union{Tuple{HPSAnalysis.SimData{T, I}}, Tuple{T}, Tuple{I}} where {I<:Integer, T<:Real}","page":"List of functions","title":"HPSAnalysis.getLargestClusterIDs","text":"getLargestClusterIDs(Sim::SimData{T,I}) where {I<:Integer, T<:Real}\n\nComputes IDs for the largest clusters.\n\nWarning is emitted if less than 80% of the proteins are within the largest cluster. The cluster definition might not be reasonable when being used to center slab simulations or other tasks.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\n\nReturns:\n\nLClustID::Vector{Int}: List of IDs for largest clusters.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.plotAvgSlabDensity-Union{Tuple{HPSAnalysis.SimData{R, I}}, Tuple{I}, Tuple{R}} where {R<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.plotAvgSlabDensity","text":"plotAvgSlabDensity(Sim::SimData; Windowlength=100)\n\nPlots the average slab histogram of the frames in range Sim.NSteps-Windowlength:Sim.NSteps. Result is empty if the Windowlength is larger then the step size at which histgrams here computed.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.plotAvgSlabDensityEvolution-Union{Tuple{HPSAnalysis.SimData{R, I}}, Tuple{I}, Tuple{R}} where {R<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.plotAvgSlabDensityEvolution","text":"plotAvgSlabDensityEvolution(Sim::SimData{R,I}; Windowlength=100) where {R<:Real, I<:Integer}\n\nPlot of the average density in the simulation box.\n\nPlots the average slab histogram in range n*Windowlength:(n+1)*Windowlength starting at Sim.EquilibrationTime. Some slices will be empty if the Windowlength is larger then the step size at which histgrams were computed.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\nWindowlength::Int: How much steps are processed.\n\nCreate:\n\nA histogram of the average density.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.plotBondAngleHist-Tuple{Any}","page":"List of functions","title":"HPSAnalysis.plotBondAngleHist","text":"plotBondAngleHist(Sim::SimData{R,I})\n\nPlot of the histogram of bond angles.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\n\nCreate:\n\nA histogram of bond angles.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.plotDensityHistogram-Union{Tuple{HPSAnalysis.SimData{R, I}}, Tuple{I}, Tuple{R}} where {R<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.plotDensityHistogram","text":"plotDensityHistogram(Sim::SimData{R,I}) where {R<:Real, I<:Integer}\n\nPlots the logarithmic density histogram computed by computeDensityHistogram.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\n\nCreate:\n\nA time averaged histogram of the average density per subcube of the simulation box.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.plotDihedralAngleHist-Tuple{Any}","page":"List of functions","title":"HPSAnalysis.plotDihedralAngleHist","text":"plotDihedralAngleHist(Sim::SimData{R,I})\n\nPlot of the befor computed histogram of dihedral angles.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\n\nCreate:\n\nA histogram of dihedral angles.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.plotIntraChainScaling-Union{Tuple{HPSAnalysis.SimData{R, I}}, Tuple{I}, Tuple{R}} where {R<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.plotIntraChainScaling","text":"plotIntraChainScaling(Sim::SimData{R,I}) where {R<:Real, I<:Integer}\n\nPlots the square intra chain distance |ri-rj| on logarithmic scales as computed by computeIntraChainScalingNaiv and computeIntraChainScalingSlidingWindow.\n\nArguments:\n\nSim::SimData{R,I}: A simulation data structure containing the Simulation information.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.BuildENMModel-Union{Tuple{I}, Tuple{T}, Tuple{HPSAnalysis.SimData{T, I}, Vararg{Any, 4}}} where {T<:Real, I<:Integer}","page":"List of functions","title":"HPSAnalysis.Setup.BuildENMModel","text":"BuildENMModel(Sim::HPSAnalysis.SimData{T,I}, DomainDict, Proteins, Sequences, ProteinJSON) where {T<:Real, I<:Integer}\n\nCalculate the Indices, that are nessesary to creat a start file im HOOMD.\n\nArguments\n\nSim::HPSAnalysis.SimData{T,I}: The simulation datas.\nDomainDict: The Domains in which the ENM is active.\nProteins: List of Protein Names.\nSequences: The Sequences of the Proteins.\nProteinJSON: AlphaFold data of the Proteins.\n\nReturn:\n\nNumber of bonds\nVector of bond type names \nID connecting bond tuple to bond type\nVector of tuples defining all bonds\nDict{String, Dict{Symbol, Float64}} which defines the bonds as used in HOOMD.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.CalvadosSetup-NTuple{5, Any}","page":"List of functions","title":"HPSAnalysis.Setup.CalvadosSetup","text":"CalvadosSetup(Sequences,AtomTypes,pH)\n\nDefine escential Parameters for the Simulation based on the Simulation Type.\n\nArguments\n\nSequences::Array{String}: List of sequences of Proteins.\nSimulationType::String: Type of Simulation (e.g.: \"Calvados2\").\npH::Float: pH-value of the system.\n\nReturn: A tuple containing:\n\nAtomTypes::Set{Char}: Set of unique amino acid types in the provided sequences.\nLongAtomTypes::Set{Char}: Set of amino acid types where the first and last amino acid in a sequence are treated as distinct types.\nAaToId::Dict{Char, Int32}: Dictionary mapping each amino acid type to a unique ID number.\nIdToAa::Dict{Int32, Char}: Dictionary mapping each ID number to its corresponding amino acid type.\nResToLongAtomType::Dict{Tuple{Char, Bool}, Char}: Dictionary mapping standard amino acids to their modified forms when at the beginning or end of a sequence.\nLongAtomTypesToRes::Dict{Char, Tuple{Char, Bool}}: Reverse mapping of ResToLongAtomType.\nOneToCharge::Dict{Char, Float}: Dictionary containing the charge values of amino acids, modified based on simulation type.\nOneToMass::Dict{Char, Float}: Dictionary containing the mass values of amino acids.\nOneToSigma::Dict{Char, Float}: Dictionary containing the sigma values of amino acids.\nOneToLambda::Dict{Char, Float}: Dictionary containing the lambda values of amino acids.\nOneToHPSDihedral0110::Dict{Char, Any}: Dictionary containing dihedral parameters for a specific configuration.\nOneToHPSDihedral1001::Dict{Char, Any}: Dictionary containing dihedral parameters for another configuration.\n\nNotes:\n\nIf SimulationType is \"Calvados2\", the first and last amino acids in each sequence are assigned different types to account for altered mass due to peptide bonding. Also the charge of histidine ('H') is adjusted based on the provided pH value using the formula: 1/(1+10^(pH-6)).\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.CombineBackboneAndENM-NTuple{5, Any}","page":"List of functions","title":"HPSAnalysis.Setup.CombineBackboneAndENM","text":"CombineBackboneAndENM(Proteins, Sequences, HOOMD_Indices, UnfoldedRegions, BackboneCorrectionDict)\n\nCombines the bond length potential of backbone and ENM.\n\nArguments\n\nProteins: List of Protein Names.\nSequences: The Sequences of the Proteins.\nHOOMD_Indices: Tuple containing the info of ENM as defined by this functions return.\nUnfoldedRegions: Dictionary defining the unfolded regions.\nBackboneCorrectionDict::Dictionary with atoms, bond length and id which will be connected via backbone.\n\nReturn:\n\nNumber of bonds\nVector of bond type names \nID connecting bond tuple to bond type\nVector of tuples defining all bonds\nDict{String, Dict{Symbol, Float64}} which defines the bonds as used in HOOMD.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.ComputeHOOMD_ENMIndices-NTuple{4, Any}","page":"List of functions","title":"HPSAnalysis.Setup.ComputeHOOMD_ENMIndices","text":"ComputeHOOMD_ENMIndices(ConstraintDict, BackboneCorrectionDict, Sequences, Proteins)\n\nCalculate the Indices, that are nessesary to creat a start file im HOOMD, .\n\nArguments\n\n`ConstraintDict::Dictionary with atoms, bond length and id which will be connected via ENM.\nBackboneCorrectionDict::Dictionary with atoms, bond length and id which will be connected via backbone.\nSequences: The Sequences of the Proteins.\nProteins: List of Protein Names.\n\nReturn:\n\nNumber of bonds\nVector of bond type names \nID connecting bond tuple to bond type\nVector of tuples defining all bonds\nDict{String, Dict{Symbol, Float64}} which defines the bonds as used in HOOMD.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.DetermineAtomTypes-Tuple{Any, Any, Any}","page":"List of functions","title":"HPSAnalysis.Setup.DetermineAtomTypes","text":"DetermineAtomTypes(Sequences, SimulationType, pH; OneToChargeDef=BioData.OneToHPSCharge, OneToLambdaDef=BioData.OneToCalvados2Lambda, OneToSigmaDef=BioData.OneToHPSCalvadosSigma)\n\nDefines essential Parameters for the simulation based on the type of the simulation.\n\nArguments\n\nSequences::Array{String}: List of sequences of proteins.\nSimulationType::String: Type of simulation (e.g.: \"Calvados2\").\npH::Float: pH-value of the system.\n\nOptional Arguments:\n\nOneToChargeDef::Dict(): Dictionary defining the charge for the Aminoacids.\nOneToLambdaDef::Dict(): Dictionary defining the Lambda for the Aminoacids.\nOneToSigmaDef::Dict(): Dictionary defining the Sigma for the Aminoacids.\n\nReturn: A tuple containing:\n\nAtomTypes::Set{Char}: Set of unique amino acid types in the provided sequences.\nLongAtomTypes::Set{Char}: Set of amino acid types where the first and last amino acid in a sequence are treated as distinct types.\nAaToId::Dict{Char, Int32}: Dictionary mapping each amino acid type to a unique ID number.\nIdToAa::Dict{Int32, Char}: Dictionary mapping each ID number to its corresponding amino acid type.\nResToLongAtomType::Dict{Tuple{Char, Bool}, Char}: Dictionary mapping standard amino acids to their modified forms when at the beginning or end of a sequence.\nLongAtomTypesToRes::Dict{Char, Tuple{Char, Bool}}: Reverse mapping of ResToLongAtomType.\nOneToCharge::Dict{Char, Float}: Dictionary containing the charge values of amino acids, modified based on simulation type.\nOneToMass::Dict{Char, Float}: Dictionary containing the mass values of amino acids.\nOneToSigma::Dict{Char, Float}: Dictionary containing the sigma values of amino acids.\nOneToLambda::Dict{Char, Float}: Dictionary containing the lambda values of amino acids.\nOneToHPSDihedral0110::Dict{Char, Any}: Dictionary containing dihedral parameters for a specific configuration.\nOneToHPSDihedral1001::Dict{Char, Any}: Dictionary containing dihedral parameters for another configuration.\n\nNotes:\n\nIf SimulationType is \"Calvados2\", the first and last amino acids in each sequence are assigned different types to account for altered mass due to peptide bonding. Also the charge of histidine ('H') is adjusted based on the provided pH value using the formula: 1/(1+10^(pH-6)).\nIf SimulationType is \"HPS-Alpha\", predefined values for charge, lambda, and sigma are used.\nIf an unknown SimulationType is provided, the function falls back on the user-supplied dictionaries for charge, lambda, and sigma values.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.DetermineCalvados3ENMfromAlphaFold-Tuple{String, Any, Any, Any}","page":"List of functions","title":"HPSAnalysis.Setup.DetermineCalvados3ENMfromAlphaFold","text":"DetermineCalvados3ENMfromAlphaFold(BasePath, DomainDict, Proteins, ProteinJSON; BBProtein=\"CA\", rcut = 9.0, plDDTcut=90.0, pae_cut=1.85)\n\nReturn a dictionary of atoms and there distances that are nessesary for the Elastic Network Model, and a dictionary for the correction of the backbone bonds in the ENM domain.\n\nArguments\n\nBasePath: The base path of the simulation setup procedure.\nDomainDict:: The Domains in which the ENM is active.\nProteins: List of Protein Names.\nProteinJSON: Dictionary of AlphaFold data of the Proteins in JSON format.\nBBProtein: The atom from which the AlphaFold datas are set for the aminoacid.\nrcut: Cut of length for the ENM in Angstroem.\nplDDTcut: Cut of plDDT parameter of AlphaFold reference for the ENM.\npae_cut: Cut of pae parameter of AlphaFold reference for the ENM.\n\nReturn:\n\nConstraintDict: Dictionary that maps Protein names to a Vector containing Tuples of Indices of i,j and distance r which define additional bonds necessary for ENM.\nBackboneCorrectionDict: Dictionary that maps Protein names to a Vector containing Tuples of Indices of i,j and distance r which define the backbone bonds that may have different lengths in ENM regions.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.DetermineYukawaInteractions-Tuple{}","page":"List of functions","title":"HPSAnalysis.Setup.DetermineYukawaInteractions","text":"DetermineYukawaInteractions(;SimulationType=\"\", Temperature=300, SaltConcentration=-1)\n\nCalculates the constants for the Yukawa potencial for given temperature and salt concentration.\n\nArguments\n\nSimulationType::String: Type of Simulation (e.g.: \"Calvados2\").\n\nOptional Arguments:\n\nTemperature::Float: Temperature of the Simulation.\nSaltConcentration::Float: Salt concentration of the Simulation.\n\nReturn:\n\nϵ_r::Float: Temperature-dependent dielectric constant.\nκ::Float: Invers of the Debye length.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.GenerateUnfoldedRegions-Tuple{Any, Any, Any}","page":"List of functions","title":"HPSAnalysis.Setup.GenerateUnfoldedRegions","text":"GenerateUnfoldedRegions(Proteins, DomainDict, Sequences)\n\nGenerates a dictionary that defines the unfolded regions of proteins based on the definition of folded regions.\n\nArguments\n\nProteins: List of Protein Names.\nDomainDict:: The Domains in which the ENM is active.\nSequences: The Sequences of the Proteins.\n\nReturn:\n\nUnfoldedDict:: Dict{String, Vector{Tuple{Int64, Int64}}}(): Maps Protein names onto vectors of tuples that define the regions of unfolded regions.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.WriteDictionaries-Tuple{String, Vararg{Any, 5}}","page":"List of functions","title":"HPSAnalysis.Setup.WriteDictionaries","text":"WriteDictionaries(filename::String, ToCharge, ToID, ToMass, ToDiameter, ToLambda)\n\nWrite a data file with all Dictionaries that are used in the Simulation.\n\nArguments\n\nfilename::String: Path where the data will be saved.\nToCharge::Dict(): Dictionary defining the charge for the Aminoacids.\nToID::Dict(): Dictionary mapping each amino acid type to a unique ID number.\nToMass::Dict(): Dictionary defining the mass for the Aminoacids.\nToDiameter::Dict(): Dictionary defining the diameter for the Aminoacids.\nToLambda::Dict(): Dictionary defining the Lambda for the Aminoacids.\n\nCreat:\n\nWrite a file with all Dictionaries.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.WriteENM_HOOMD_Indices-Tuple{String, Any}","page":"List of functions","title":"HPSAnalysis.Setup.WriteENM_HOOMD_Indices","text":"WriteENM_HOOMD_Indices(filename::String, ENM)\n\nWrite a data file with all necessary datas for the ENM in HOOMD.\n\nArguments\n\nfilename::String: Path where the data will be saved.\nENM::Tuple: The necessary datas.\n\nCreat:\n\nWrite a file with all datas for the ENM.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.WriteHOOMDParticlesInput-Union{Tuple{R}, Tuple{String, Array{R}, Vararg{Any, 6}}} where R<:Real","page":"List of functions","title":"HPSAnalysis.Setup.WriteHOOMDParticlesInput","text":"WriteHOOMDParticlesInput(filename::String, pos::Array{R}, ToCharge, ToID, Sequences, ToMass, ToDiameter, image) where {R<:Real}\n\nWrite a data file that contains position, charge, mass and diameter for the the amino acids.\n\nArguments\n\nfilename::String: Path where the data will be saved.\npos::Array: List of positions for each amino acid.\nSequences::Array{String}: List of protein sequences.\nToMass::Dict(): Dictionary defining the mass for the amino acids.\nToDiameter::Dict(): Dictionary defining the diameter for the amino acids.\nimage::Array{<Integer}: Number of the periodic image of each amino acid.\n\nCreat:\n\nWrite a file with the escential datas of each Aminoacid.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.WriteHOOMDSequences-Tuple{String, Any}","page":"List of functions","title":"HPSAnalysis.Setup.WriteHOOMDSequences","text":"WriteHOOMDSequences(filename::String, Sequences)\n\nWrite a data file with the sequence of each protein.\n\nArguments\n\nfilename::String: Path where the data will be saved.\nSequences::Array{String}: List of protein sequences.\n\nCreat:\n\nWrite a file with all Sequences.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.WriteParams-NTuple{8, Any}","page":"List of functions","title":"HPSAnalysis.Setup.WriteParams","text":"WriteParams(filename, SimName, Temp, NSteps, NOut, Timestep, Box, Seed; Minimise=true, TrajectoryName=\"traj.gsd\", UseAngles=true, UseCharge=true, Alt_GSD_Start=\"-\", Create_Start_Config=false, ϵ_r=1.73136, κ=1.0, Device=\"GPU\", yk_cut=4.0, ah_cut=2.0, ionic=0.1, pH=7.0, SimType=\"Calvados2\",domain=Array([[0,0]]))\n\nWrite a data file that contains all Parameters of the Simulation.\n\nArguments\n\nfilename::String: Path where the data will be saved.\nSimName::String: Name of the Simulation.\nTemp::Float: Temperature of the Simulation.\nNSteps::Float: The Number of steps for the Simulation.\nNOut::Integer: The Number of steps to determine datas.\nTimestep::Float: Time step of the simulation.\nBox::Array: Size of the Simulation Box.\nSeed::Float: Seed for the pseudorandom number generator.\nMinimise::Boolean: Sould the energy be minimize befor the Simulation.\nTrajectoryName::String: Data file for the trajectorys.\nUseAngles::Boolean: (De-)Activate angle and dihedral potentials (default=off).\nUseCharge::Boolean: (De-)Activate yukawa potentials (default=on).\nAlt_GSD_Start::String: Name of alternative GSD start file.\nCreate_Start_Config::Boolean: Set to true, if the python scripts should create a start configuration (numerically unstable/badly equilibrated). \nϵ_r::Float: Dielectric constant.\nκ::Float: Debye length of electrostatic potential.  .\nDevice::String: Device on which simulation is running (default=GPU).\nyk_cut::Float: Cutoff for the Yukawa potential.\nah_cut::Float: Cutoff for the Ashbaugh potential.\nionic::Float: Ionic strength used for Yukawa potential.\npH::Float: PH value of the simulation.\nSimType::String: Type of the simulation (like Calvados2, Calvados3).\ndomain::Array: Area in with the ENM is active (only for Calvados3).\n\nCreat:\n\nWrite a file with all parameters of the simulation that are given from the arguments.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.writeGSDStartFile-Union{Tuple{I2}, Tuple{R}, Tuple{I}, Tuple{String, I, I, I, I, Vector{R}, Array{R}, Dict{Char, <:Integer}, Any, Array{I2}, Array{<:Real}, Array{R}, Dict, Matrix{<:Integer}, Dict{Char, <:Real}, Bool, String, Any, Any}} where {I<:Integer, R<:Real, I2<:Integer}","page":"List of functions","title":"HPSAnalysis.Setup.writeGSDStartFile","text":"writeGSDStartFile(FileName::String, NAtoms::I, NBonds::I, NAngles::I, NDihedrals::I,Box::Vector{R}, Positions::Array{R}, AaToId::Dict{Char, <:Integer},Sequences,  InputImage::Array{I2}, InputMasses::Array{<:Real}, InputCharges::Array{R}, DihedralMap::Dict, DihedralList::Matrix{<:Integer}, AaToSigma::Dict{Char, <:Real}, UseAngles::Bool, SimulationType::String, Domains, ENM) where {I<:Integer, R<:Real, I2<:Integer}\n\nA GSD data file is written, that include the parameters for the Simulation witch are given as Arguments.\n\nArguments\n\nFileName::String: Name of the output GSD file.\nNAtoms::Int: The total number of amino acids (atoms) in the system.\nNBonds::Int: The number of bonds between amino acids (NAtoms - 1).\nNAngles::Int: The number of angles formed between amino acids (NAtoms - 2).\nNDihedrals::Int: The number of dihedral angles between amino acids (NAtoms - 3).\nBox::Vector{Float}: 3-element vector specifying the dimensions of the simulation box\nPositions::Array{Float}: Array of the atomic coordinates of the Aminoacids.\nAaToId::Dict{Char, Int}: Dictionary mapping each amino acid type to a unique ID number.\nSequences::Array{String}: A list of protein sequences, where each sequence is represented as a string of amino acids.\nInputImage::Array{Int}: An array used to determine periodic boundary conditions and correct atomic positions.\nInputMasses::Array{Float}: A 1D array specifying the mass of each amino acid.\nInputCharges::Array{Float}: A 1D array specifying the electric charge of each amino acid.\nDihedralMap::Dict: A dictionary mapping unique dihedral angle definitions (four atom indices) to dihedral types.\nDihedralList::Matrix{Int}: A matrix where each row defines a specific dihedral angle using atom indices.\nAaToSigma::Dict{Char, <:Real}: A dictionary mapping amino acid types to their Lennard-Jones σ-parameter (used in force field calculations).\nUseAngles::Bool: If true, angle and dihedral interactions are included in the GSD file.\nSimulationType::String: Type of simulation.\nDomains::List(Int): Domains in which the ENM is active.\nENM::Tuple: Data that are nessesary for ENM (bond name, id, group).\n\nCreates:\n\nWrites the GSD data files.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.writeHOOMD-NTuple{31, Any}","page":"List of functions","title":"HPSAnalysis.Setup.writeHOOMD","text":"writeHOOMD(Sequences,pos,image,OneToCharge,AaToId,OneToMass,OneToSigma,OneToLambda,AlphaAddition,dihedral_long_map,dihedral_eps,SimulationType,Temperature,SaltConcentration,BoxSize,StartFileName,NSteps,WriteOutFreq,Device,yk_cut,ah_cut,pH,domain,NAtoms,NBonds,NAngles,NDihedrals,dihedral_short_map,dihedral_list, ENM)\n\nWrites the datas for the simulation in different files with HOOMD.\n\nArguments\n\nfrom writeStartConfiguration()\n\nCreates:\n\nWrites the datas for the simulation.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.writeHPSLammps-NTuple{32, Any}","page":"List of functions","title":"HPSAnalysis.Setup.writeHPSLammps","text":"writeHPSLammps(fileName,Sequences,AtomTypes,LongAtomTypes,LongAtomTypesToRes,InitStyle,ChargeTemperSteps,ChargeTemperSwapSteps,pos,image,OneToCharge,AaToId,OneToMass,OneToSigma,OneToLambda,AlphaAddition,dihedral_long_map,dihedral_eps,SimulationType,Temperature,SaltConcentration,BoxSize,StartFileName,NSteps,WriteOutFreq,pH,NAtoms,NBonds,NAngles,NDihedrals,Info,NAtomTypes)\n\nWrites the datas for the simulation in different files.\n\nArguments\n\nfrom writeStartConfiguration()\n\nCreates:\n\nWrites the datas for the simulation.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Setup.writeStartConfiguration","page":"List of functions","title":"HPSAnalysis.Setup.writeStartConfiguration","text":"writeStartConfiguration(fileName, StartFileName, Info, Sequences, BoxSize,NSteps=100_000_000; SimulationType=\"Calvados2\", Temperature=300,MixingRule=\"1-1001-1\", Pos =zeros(Float32, 0),InitStyle=\"Slab\", SaltConcentration=0.15, pH=6.0, ChargeTemperSteps=[], ChargeTemperSwapSteps=100_000, HOOMD=false, OneToChargeDef=BioData.OneToHPSCharge, OneToLambdaDef=BioData.OneToCalvados2Lambda, OneToSigmaDef=BioData.OneToHPSCalvadosSigma,WriteOutFreq=100_000, Device=\"GPU\", yk_cut=40.0, ah_cut=20.0)\n\nWrites the start configuration for a molecular dynamics simulation.\n\nArguments\n\nfileName::String: Name of the output file.\nStartFileName::String: Name of the initial configuration file.\nInfo::String: Additional information about the simulation.\nSequences::Vector{String}: List of amino acid sequences corresponding to the proteins.\nBoxSize::Vector{Float}: A vector of minmal/maximal box dimensions in each axis. ([xmin, xmax, ymin, ymax, zmin, zmax]).\nNSteps::Int: Number of simulation steps (default: 100,000,000).\nSimulationType::String: IDP model used for simulations.(default: \"Calvados2\").\nTemperature::Float: Temperature in Kelvin (default: 300).\nMixingRule::String: Mixing rule for optional dihedral potential for Calvados models.\nPos::Vector{Float}: Initial positions. (default: empty array).\nInitStyle::String: Initialization style, e.g., \"Slab\" or \"Pos\".\nSaltConcentration::Float: Salt concentration in M (default: 0.15).\npH::Float: pH level (default: 6).\nChargeTemperSteps: List of charge tempering steps.\nChargeTemperSwapSteps::Int: Swap steps for charge tempering.\nHOOMD::Boolean: Boolean to enable HOOMD compatibility.\nOneToChargeDef::Dict: Dictionary defining the amount of charge for each one letter atom type.\nOneToSigmaDef::Dict: Dictionary defining the sigma parameter in LJ potentials for each one letter atom type.\nOneToLambdaDef::Dict: Dictionary defining the lambda paramter in Ashbaugh-Hatch potentials for each one letter atom type.\nWriteOutFreq::Int: Frequency of writing output (default: 100,000).\nDevice::String: Computational device, \"CPU\"/\"GPU\" (default: \"GPU\").\nyk_cut::Float: Cutoff distances for yukawa potential.\nah_cut::Float: Cutoff distances for ashbaugh hatch potential.\ndomain::List(Int): Domains in which the ENM is active.\nENM::Tuple: Data that are nessesary for ENM (bond name, id, group).\n\nCreates:\n\nWrites data files with the start configuration.\n\n\n\n\n\n","category":"function"},{"location":"listfunctions/#HPSAnalysis.Polyply.ConvertGroToPDB-Tuple{Any, Any}","page":"List of functions","title":"HPSAnalysis.Polyply.ConvertGroToPDB","text":"ConvertGroToPDB(Path, Filename)\n\nA gro data file is converted to a pdb data file.\n\nArguments\n\nPath::String: Path to the gro file.\nFilename::String: Name of the gro file.\n\nCreat:\n\nA pdb data file.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Polyply.GenerateCoordinates-NTuple{4, Any}","page":"List of functions","title":"HPSAnalysis.Polyply.GenerateCoordinates","text":"GenerateCoordinates(SimulationPath, SimulationName, Box, TopologyFile)\n\nGenerate a gro file from the TopologyFile which is used for the start coordinates.\n\nArguments\n\nSimulationPath::String: Path where to save the gro data file.\nSimulationName::String: Name of the simulation (save name).\nBox::Arry(Float): Diameters of the simulationbox.\nTopologyFile::String: Topology data file.\n\nCreat:\n\nA gro data file.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Polyply.GenerateENM_ITPFilesOfSequence-Union{Tuple{I}, Tuple{String, Any, Dict{String, Array{Tuple{I, I}, 1}}}} where I<:Integer","page":"List of functions","title":"HPSAnalysis.Polyply.GenerateENM_ITPFilesOfSequence","text":"GenerateENM_ITPFilesOfSequence(BasePath::String, Names, Domains::Dict{String,Vector{Tuple{I,I}}})\n\nGenerate pdb and itp data files for the ENM with martinize2 (only Calvados3).\n\nArguments\n\nBasePath::String: Data path.\nNames::List(String): List of protein names.\nDomains::Dict{String,Vector{Tuple{I,I}}}: Dictionary with domains for each protein.\n\nCreat:\n\nData files for the ENM.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Polyply.GenerateITPFilesOfSequence-Tuple{Any, Any, Any}","page":"List of functions","title":"HPSAnalysis.Polyply.GenerateITPFilesOfSequence","text":"GenerateITPFilesOfSequence(Names, Sequences, OutputPath)\n\nGenerate a itp file for one protein with the given sequence, with datas like atoms, bonds, angels.\n\nArguments\n\nNames::Array(String): Names of the proteins.\nSequences::Array(String): Sequences of the proteins.\nOutputPath::String: Path for the itp file.\n\nCreat:\n\nA itp file.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Polyply.GenerateSlabTopologyFile-NTuple{4, Any}","page":"List of functions","title":"HPSAnalysis.Polyply.GenerateSlabTopologyFile","text":"GenerateSlabTopologyFile(Filename, ITPPath, Names, SimulationName)\n\nGenerate a Topology file which include the number and name of the proteins that are simulated.\n\nArguments\n\nFilename::String: Path for the topology file.\nITPPath::String: Pathe of the itp file.\nNames:Array(String):: List of protein names.\nSimulationName::String: Name of the simulation.\n\nCreat:\n\nA topology data file.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Polyply.readPDB-NTuple{4, Any}","page":"List of functions","title":"HPSAnalysis.Polyply.readPDB","text":"readPDB(Filename, x,y,z)\n\nRead the coordinates of the atoms from a pdb file.\n\nArguments\n\nFilename::: Path of the pdb file.\nx::Array(Float): List of x-coordinates.\ny::Array(Float): List of y-coordinates.\nz::Array(Float): List of z-coordinates.\n\n\n\n\n\n","category":"method"},{"location":"listfunctions/#HPSAnalysis.Polyply.readSimpleGRO-NTuple{4, Any}","page":"List of functions","title":"HPSAnalysis.Polyply.readSimpleGRO","text":"readSimpleGRO(Filename, x,y,z)\n\nRead the coordinates of the atoms from a gro file.\n\nArguments\n\nFilename::: Path of the pdb file.\nx::Array(Float): List of x-coordinates.\ny::Array(Float): List of y-coordinates.\nz::Array(Float): List of z-coordinates.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"This is mostly a software package to setup, run, and analyse molecular dynamics simulations of the HPS-Models used for IDPS. At times it supported running simulations in LAMMPS and HOOMD. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is currently under developement and may contain unintended behaviour.","category":"page"},{"location":"Requirements/#Requirements-for-HPSAnalysis.jl","page":"Installation","title":"Requirements for HPSAnalysis.jl","text":"","category":"section"},{"location":"Requirements/","page":"Installation","title":"Installation","text":"Julia installation after cloning from github:","category":"page"},{"location":"Requirements/","page":"Installation","title":"Installation","text":"    ] dev /path/to/HPSAnalysis.jl  ","category":"page"},{"location":"Requirements/#(Test-of)-Setup-Routine","page":"Installation","title":"(Test of) Setup Routine","text":"","category":"section"},{"location":"Requirements/","page":"Installation","title":"Installation","text":"The module named Setup allows to set up Calvados2 and Calvados3 via the Python wrapper of the simulation package named HOOMD. Therefore, one needs to manually install a python environment with the following packages","category":"page"},{"location":"Requirements/","page":"Installation","title":"Installation","text":"Polyply\nmartinize2 (Calvados3)\nHOOMD\nGSD\nNumpy\nh5py\nPyCifRW","category":"page"},{"location":"Requirements/","page":"Installation","title":"Installation","text":"For the tests to work, one needs to activate the Python environment before starting Julia and safe the Path to the Python executable in the file \"/HPSAnalysis/data/EnvironmentPath.txt\" . ","category":"page"},{"location":"Deprecated/#Deprecated","page":"Deprecated","title":"Deprecated","text":"","category":"section"},{"location":"Deprecated/","page":"Deprecated","title":"Deprecated","text":"Some of the functionalities were partially implemented or not used after switching such that the may not work anymore.","category":"page"},{"location":"Deprecated/","page":"Deprecated","title":"Deprecated","text":"The following features have not been tested and their use was stopped independent thereof:","category":"page"},{"location":"Deprecated/","page":"Deprecated","title":"Deprecated","text":"Simulation setup in LAMMPS, including generation of Slurm input files, some paths are hard coded as of now.\nBond and dihedral angle potentials for Calvados simulations.\nBond and dihedral angle analysis.","category":"page"},{"location":"Deprecated/","page":"Deprecated","title":"Deprecated","text":"These features might still work.","category":"page"},{"location":"Deprecated/","page":"Deprecated","title":"Deprecated","text":"The following features are known not to work:","category":"page"},{"location":"Deprecated/","page":"Deprecated","title":"Deprecated","text":"Polyply setup for Calvados3: Elastic Network Models are not properly generated with polyply.","category":"page"}]
}
